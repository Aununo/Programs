from Crypto.Util.number import *

def pgcd(p1, p2):
    return p1.monic() if not p2 else pgcd(p2, p1%p2)

def franklinReiter(n, e, r, c1, c2):
    R.<X> = PolynomialRing(Zmod(n))
    f1 = X^e - c1
    f2 = (X + r)^e - c2
    return Integer(n - (pgcd(f1, f2)).coefficients()[0])

n = 106779363880076711773075699433100599895752060445908922588084993492786672784954758549724923806403815118329157370314538739556401945331526955585157296102995095058754131439773509333156269006100625688320139764686427638742922183379567401526489614734413753625605868977997707989608662119117472672541825583454466252249
delta = 118213943928964692131681911554523043480519176140778442241686032633789966281330512604904235341538576163059642583837358962734675482139463734627459846464016893267630963298445219866530559060385220958414475107951781234568817651589371875381274817463012860268745594355922832515274085557941829993477982849565203831157
c1 = 34663150129434657933013580561073403868368642117172823953309968804053630576027962656647472614936858072893901317336864316142615890221332765871236633745002723914241788757810175949804415680907931109864935094279302980782233439010460241333733342348240105606827729876563669989545941758458007227666481095933161752880
c2 = 20732184545170566185887724502415035711290809508036601172320311201995234181771554470576913863496604707865719290738222775905251826243178014149682876398475630299003284439939330536792467070111163515963000915599545258223116155880179560004989878902770439637039588673994503746074047210052685834276257197511496439251

for i in range(-255, 256):
    e = 127
    m = franklinReiter(n, e, i * delta, c1, c2)
    found = False
    for j in range(1, 256):
        try:
            flag = long_to_bytes((m - j * delta % n + n) % n).decode()
        except Exception as e:
            continue
        else:
            print(flag)
            found = True
            break
    if found:
        break
